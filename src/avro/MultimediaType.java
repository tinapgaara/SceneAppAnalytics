/**
* Autogenerated by Avro
*
* DO NOT EDIT DIRECTLY
*/
 package avro;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MultimediaType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MultimediaType\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public CharSequence type;
    @Deprecated public CharSequence url;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public MultimediaType() {}

    /**
     * All-args constructor.
     */
    public MultimediaType(CharSequence type, CharSequence url) {
        this.type = type;
        this.url = url;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0: return type;
            case 1: return url;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0: type = (CharSequence)value$; break;
            case 1: url = (CharSequence)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'type' field.
     */
    public CharSequence getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     * @param value the value to set.
     */
    public void setType(CharSequence value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'url' field.
     */
    public CharSequence getUrl() {
        return url;
    }

    /**
     * Sets the value of the 'url' field.
     * @param value the value to set.
     */
    public void setUrl(CharSequence value) {
        this.url = value;
    }

    /** Creates a new MultimediaType RecordBuilder */
    public static Builder newBuilder() {
        return new Builder();
    }

    /** Creates a new MultimediaType RecordBuilder by copying an existing Builder */
    public static Builder newBuilder(Builder other) {
        return new Builder(other);
    }

    /** Creates a new MultimediaType RecordBuilder by copying an existing MultimediaType instance */
    public static Builder newBuilder(MultimediaType other) {
        return new Builder(other);
    }

    /**
     * RecordBuilder for MultimediaType instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MultimediaType>
            implements org.apache.avro.data.RecordBuilder<MultimediaType> {

        private CharSequence type;
        private CharSequence url;

        /** Creates a new Builder */
        private Builder() {
            super(MultimediaType.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.url)) {
                this.url = data().deepCopy(fields()[1].schema(), other.url);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing MultimediaType instance */
        private Builder(MultimediaType other) {
            super(MultimediaType.SCHEMA$);
            if (isValidValue(fields()[0], other.type)) {
                this.type = data().deepCopy(fields()[0].schema(), other.type);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.url)) {
                this.url = data().deepCopy(fields()[1].schema(), other.url);
                fieldSetFlags()[1] = true;
            }
        }

        /** Gets the value of the 'type' field */
        public CharSequence getType() {
            return type;
        }

        /** Sets the value of the 'type' field */
        public Builder setType(CharSequence value) {
            validate(fields()[0], value);
            this.type = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'type' field has been set */
        public boolean hasType() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'type' field */
        public Builder clearType() {
            type = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'url' field */
        public CharSequence getUrl() {
            return url;
        }

        /** Sets the value of the 'url' field */
        public Builder setUrl(CharSequence value) {
            validate(fields()[1], value);
            this.url = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'url' field has been set */
        public boolean hasUrl() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'url' field */
        public Builder clearUrl() {
            url = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public MultimediaType build() {
            try {
                MultimediaType record = new MultimediaType();
                record.type = fieldSetFlags()[0] ? this.type : (CharSequence) defaultValue(fields()[0]);
                record.url = fieldSetFlags()[1] ? this.url : (CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
